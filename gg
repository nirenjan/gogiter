#!/bin/bash
# GoGit'er command line application

#======================================================================
# Shell options
#======================================================================
shopt -s -o errexit     # Fail on error
shopt -s -o nounset     # Fail on unset variables
shopt -s nullglob       # Allow empty output for glob patterns

#======================================================================
# Environment control
#======================================================================
# Root directory - used for loading modules
GGROOT=$(dirname $(realpath $0))

# Set the debug variable to be empty
GGDEBUG=${GGDEBUG:-}

#======================================================================
# Utility functions
#======================================================================
# Debug function - prints the debug messages to the console
debug()
{
    if [[ -n "$GGDEBUG" ]]
    then
        local src_file=${BASH_SOURCE[1]#$GGROOT/}
        local src_line=${BASH_LINENO[0]}

        if [[ "$src_file" == "$0" ]]
        then
            src_file=$(basename $0)
        fi

        for msg in "$@"
        do
            {
                # Print it in a colorful format
                echo -n "$(tput setaf 7)DEBUG: "
                echo -n "$(tput setaf 2)$src_file"
                echo -n "$(tput sgr0):"
                echo -n "$(tput setaf 3)$src_line "
                echo -n "$(tput sgr0)"
                echo -- "$msg"
            } >&2
        done
    fi
}

# Warning function - prepends the utility name to all arguments
# and prints them to stderr
warn()
{
    for msg in "$@"
    do
        echo "gogiter: $msg" >&2
    done
}

# Colorize the stacktrace
# This takes the output of `caller $frame` and colorizes it
colorize_stackframe()
{
    local frame=$1
    local output=$(caller $frame)

    if [[ -z "$output" ]]
    then
        return 1
    fi

    set -- $output

    local lineno=$1
    local func=$2
    local file=${3#$GGROOT/}

    if [[ "$file" == "$0" ]]
    then
        file=$(basename $0)
    fi

    {
        echo -ne "\t$(tput setaf 2)$file$(tput sgr0):$(tput setaf 3)$lineno "
        echo -e "\t$(tput sgr0)$func"
    } >&2
    return 0
}

# Dump backtrace
# This is used to dump the complete call stack
dump_backtrace()
{
    # Start frame from 1, since we are calling a new function for
    # colorizing the stackframe
    local frame=${1:-1}
    while colorize_stackframe $frame
    do
        ((frame++))
    done
}

# Panic function - aborts and exits with an error
panic()
{
    local exit_code=$1
    shift
    warn "$@"

    # Dump stacktrace
    if [[ -n "$GGDEBUG" ]]
    then
        dump_backtrace
    fi

    exit $exit_code
}

# Exit handler
exit_handler()
{
    local exit_code=$?

    # If the script exits with a failure, then dump the backtrace
    if [[ $exit_code != 0 ]]
    then
        # Obviously, we don't want the exit_handler showing up in
        # the backtrace - skip it
        [[ -n "${GGBACKTRACE:-}" ]] && dump_backtrace 2
    fi

    return $?
}

trap exit_handler EXIT

#======================================================================
# Module handling
#======================================================================
# Import functionality from submodules
gg_module_import_all()
{
    for module in $GGROOT/lib/*.bash
    do
        debug "Adding module '${module#$GGROOT/lib/}'"
        source "$module"
    done
}

#======================================================================
# Main functionality
#======================================================================
gg_module_import_all
gg_parse_command_line "$@"
